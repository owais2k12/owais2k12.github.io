I"<p>为了完整起见，我用一些例子加以说明 ${ } 的一些特异功能：</p>

<p>假设我们定义了一个变量为：<code class="language-plaintext highlighter-rouge">file=/dir1/dir2/dir3/my.file.txt</code></p>

<p>我们可以用 ${ } 分别替换获得不同的值：</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file#*/}</code>：拿掉第一条 / 及其左边的字串：dir1/dir2/dir3/my.file.txt</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file##*/}</code>：拿掉最后一条 / 及其左边的字串：my.file.txt</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file#*.}</code>：拿掉第一个 . 及其左边的字串：file.txt</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file##*.}</code>：拿掉最后一个 . 及其左边的字串：txt</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file%/*}</code>：拿掉最后条 / 及其右边的字串：/dir1/dir2/dir3</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file%%/*}</code>：拿掉第一条 / 及其右边的字串：(空值)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file%.*}</code>：拿掉最后一个 . 及其右边的字串：/dir1/dir2/dir3/my.file</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file%%.*}</code>：拿掉第一个 . 及其右边的字串：/dir1/dir2/dir3/my</p>
  </li>
</ul>

<p>记忆的方法为：</p>

<ul>
  <li>
    <p># 是去掉左边(在鑑盘上 # 在 $ 之左边)</p>
  </li>
  <li>
    <p>\% 是去掉右边(在鑑盘上 % 在 $ 之右边)</p>
  </li>
</ul>

<p>单一符号是最小匹配﹔两个符号是最大匹配。</p>

<p><code class="language-plaintext highlighter-rouge">${file:0:5}</code>：提取最左边的 5 个字节：/dir1</p>

<p><code class="language-plaintext highlighter-rouge">${file:5:5}</code>：提取第 5 个字节右边的连续 5 个字节：/dir2</p>

<p>我们也可以对变量值裡的字串作替换：</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file/dir/path}</code>：将第一个 dir 提换为 path：/path1/dir2/dir3/my.file.txt</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file//dir/path}</code>：将全部 dir 提换为 path：/path1/path2/path3/my.file.txt</p>
  </li>
</ul>

<p>利用 <code class="language-plaintext highlighter-rouge">${ }</code> 还可针对不同的变数状态赋值(没设定、空值、非空值)：</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file-my.file.txt}</code> ：假如 $file 没有设定，则使用 my.file.txt 作传回值。(空值及非空值时不作处理)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file:-my.file.txt}</code> ：假如 $file 没有设定或为空值，则使用 my.file.txt 作传回值。 (非空值时不作处理)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file+my.file.txt}</code> ：假如 $file 设为空值或非空值，均使用 my.file.txt 作传回值。(没设定时不作处理)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file:+my.file.txt}</code> ：若 $file 为非空值，则使用 my.file.txt 作传回值。 (没设定及空值时不作处理)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file=my.file.txt}</code> ：若 $file 没设定，则使用 my.file.txt 作传回值，同时将 $file 赋值为 my.file.txt 。 (空值及非空值时不作处理)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file:=my.file.txt}</code> ：若 $file 没设定或为空值，则使用 my.file.txt 作传回值，同时将 $file 赋值为 my.file.txt 。 (非空值时不作处理)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file?my.file.txt}</code> ：若 $file 没设定，则将 my.file.txt 输出至 STDERR。 (空值及非空值时不作处理)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${file:?my.file.txt}</code> ：若 $file 没设定或为空值，则将 my.file.txt 输出至 STDERR。 (非空值时不作处理)</p>
  </li>
</ul>

<p>tips:</p>

<p>以上的理解在于, 你一定要分清楚 unset 与 null 及 non-null 这三种赋值状态.</p>

<p>一般而言, : 与 null 有关, 若不带 : 的话, null 不受影响, 若带 : 则连 null 也受影响.</p>

<p>还有哦，<code class="language-plaintext highlighter-rouge">${#var}</code> 可计算出变量值的长度：</p>

<p><code class="language-plaintext highlighter-rouge">${#file}</code> 可得到 27 ，因为 /dir1/dir2/dir3/my.file.txt 刚好是 27 个字节.</p>

:ET